dir: &dir
  working_directory: ~/catkin_ws

image: &image
  docker:
  - image: robojackets/igvc-baseimage:latest

install_deps: &install_deps
  run: apt-get update && rosdep update && rosdep install -iy --from-paths ./src --skip-keys='kindr'

save_src_cache: &save_src_cache
  save_cache:
    key: source-v1-{{ .Branch }}-{{ .Revision }}
    paths:
    - ".git"
load_src_cache: &load_src_cache
  restore_cache:
    keys:
    - source-v1-{{ .Branch }}-{{ .Revision }}
    - source-v1-{{ .Branch }}-
    - source-v1-
save_compile_cache: &save_compile_cache
  save_cache:
    key: ccache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
    paths:
    - ~/.ccache
load_compile_cache: &load_compile_cache
  restore_cache:
    keys:
    - ccache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
    - ccache-{{ arch }}-{{ .Branch }}
    - ccache-{{ arch }}
    - ccache-
save_test_cache: &save_test_cache
  save_cache:
    key: ccache-test-{{ arch }}-{{ .Branch }}-{{ .Revision }}
    paths:
    - ~/.ccache
load_test_cache: &load_test_cache
  restore_cache:
    keys:
    - ccache-test-{{ arch }}-{{ .Branch }}-{{ .Revision }}
    - ccache-test-{{ arch }}-{{ .Branch }}
    - ccache-test-{{ arch }}
    - ccache-test-

save_workspace: &save_workspace
  persist_to_workspace:
    root: ~/catkin_ws
    paths:
    - build/*
    - devel/*
load_workspace: &load_workspace
  attach_workspace:
    at: ~/catkin_ws

checkout_submodules: &checkout_submodules
  run: cd src/igvc-software && git submodule sync && git submodule update --init

version: 2
jobs:
  compile:
    <<: *dir
    <<: *image
    steps:
    - <<: *load_src_cache
    - checkout:
        path: ~/catkin_ws/src/igvc-software
    - <<: *checkout_submodules
    - <<: *save_src_cache
    - <<: *install_deps
    - <<: *load_compile_cache
    - run: source /opt/ros/melodic/setup.sh && catkin_make -j2 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - <<: *save_compile_cache
    - <<: *save_workspace
  test:
    <<: *dir
    <<: *image
    steps:
    - <<: *load_src_cache
    - checkout:
        path: ~/catkin_ws/src/igvc-software
    - <<: *checkout_submodules
    - <<: *save_src_cache
    - <<: *install_deps
    - <<: *load_workspace
    - <<: *load_test_cache
    - run: source /opt/ros/melodic/setup.sh && catkin_make run_tests -j2 && catkin_test_results
    - <<: *save_test_cache
  format:
    working_directory: ~/catkin_ws/src/igvc-software
    <<: *image
    steps:
    - <<: *load_src_cache
    - checkout:
        path: ~/catkin_ws/src/igvc-software
    - <<: *save_src_cache
    - run: |
        apt-get update -y
        apt-get install -y clang-format-6.0
        ln -s /usr/bin/clang-format-6.0 /usr/bin/clang-format
        clang-format -dump-config
        SOURCE_FILES=`find . -name '*.h' -or -name '*.hpp' -or -name '*.cpp' -not -path "./external/*"`
        for SOURCE_FILE in $SOURCE_FILES
        do
          export FORMATTING_ISSUE_COUNT=`clang-format -output-replacements-xml $SOURCE_FILE | grep offset | wc -l`
          if [ "$FORMATTING_ISSUE_COUNT" -gt "0" ]; then
            echo "Source file $SOURCE_FILE contains formatting issues. Please use clang-format tool to resolve found issues."
            exit 1
          fi
        done
  clang-tidy:
    <<: *dir
    <<: *image
    steps:
      - <<: *load_src_cache
      - checkout:
          path: ~/catkin_ws/src/igvc-software
      - <<: *checkout_submodules
      - <<: *save_src_cache
      - <<: *install_deps
      - <<: *load_workspace
      - run: |
          apt-get update -y
          apt-get install -y clang-tidy-8 clang-tools-8 parallel
          cd src/igvc-software && ./.circleci/utils/tidy.sh
      - store_test_results:
          path: build/test-results
workflows:
  version: 2
  format:
    jobs:
    - format
  build_and_test:
    jobs:
    - compile
    - test:
        requires:
        - compile
    - clang-tidy:
        requires:
        - compile
