pointcloud_filter:
    topic:
        input: "velodyne_points"            # Input topic for the pointcloud filter
        transformed: "lidar/transformed"    # Output topic for the transformed pointcloud (in base_frame instead of lidar frame)
        occupied: "lidar/occupied"          # Output topic for the occupied points
        free: "lidar/free"                  # Output topic for the free points
    # back_filter filters out points behind the lidar, ie. the robot itself
    back_filter:
        start_angle: -2.0                   # Starting angle to filter from (rad)
        end_angle: 2.0                      # End angle for filtering (rad)
    # radius_filter filters out points that are further than some radius_squared (m^2)
    radius_filter:
        radius_squared: 225
    # ground_filter performs some naive ground filtering based on the z-value of the points
    ground_filter:
        height_min: 0.4                     # Min z-value of the point to be considered, ie. not ignore (m)
        height_max: 1.2                     # Max z-value of the point to be considered, ie. not ignore (m)
    # raycast_filter computes the free points by performing a raycasting for each occupied lidar point.
    # For each "ray", it produces two points (one starting, one ending)
    raycast_filter:
        min_range: 2.0                      # Minimum range to raycast from (m). Should correspond to min range of lidar
        end_distance: 15                    # End distance to raycast to (m).
        angular_resolution: 0.02            # Angular resolution of the lidar (rad)
        start_angle: -2.0                   # Start angle for raycasting (rad)
        end_angle: 2.0                      # End angle for raycasting (rad)
    # fast_segment_filter is Josh's ground filter
    fast_segment_filter:
        ground_topic: "/ground"             # Extra topic to publish ground points to
        nonground_topic: "/nonground"       # Extra topic to publish nonground points to (also published to occupied topic above)
        num_segments: 360                   # Number of pie slices to break the world into
        error_t: .1                         # Threshold on the error for line models (meters^2). Higher threshold means longer lines with more points, smller means shorter lines with less points
        slope_t: .6                         # Threshold on slope for defining if a line is ground or not
        dist_t: .3                          # Threshold on height of a line (meters). If all points in a line are below this, then the line is ground
        debug_viz: true                     # If true, debug visualization is published to /pointcloud_filter_node/pointcloud_filter/Lines_array
    frames:
        base_footprint: "base_footprint"
    timeout_duration: 0.5
