#+TITLE: Week 2
#+AUTHOR: Kristaps Berzinch, Raymond Ortiz
#+EMAIL: kristaps@robojackets.org, rortiz9@gatech.edu

* What are we doing today?
- Introduction to C++
 - What it is
 - Functions
 - Includes and headers
 - Working with strings
- How to find and read documentation
- Sending and recieving changes from remote Git repositories

* What is C++?
#+BEGIN_NOTES
C++ is a more general programming langauge than C. It can have higher levels of abstraction. C is minimalist. C++ also has classes, it is not C with classes.
#+END_NOTES
- A general-purpose programming language
- Designed with performance, efficiency, and flexibility in mind
- Great for robots!

* Functions
#+BEGIN_NOTES
After introducing the concept, write a simple example. Don't go into prototypes yet, we'll cover them in a bit.

Open the example code on your display and try to stick to that as much as you can.
#+END_NOTES
- A function is a chunk of code with defined inputs and outputs
 - Minimizes copy-and-paste
 - Less buggy
 - Easier to test than a whole program
- These can be chained together for more complex functionality
- You want each function to have a single high-level purpose

* Anatomy of a function declaration
- C++ lets you have multiple functions with the same name, provided their parameter signatures are different
 - A function's parameter signature is just the ordered list of its parameter types.
 - =foo(int a, char b)= and =bar(int x, char z)= have the same signature
 - =fizz(int a, char b)= and =buzz(char x, int z)= don't
- The compiler will determine which function to actually call depending on the parameters
- (This will come in handy later!)

* Header files
#+BEGIN_NOTES
Now you can talk about prototypes!
#+END_NOTES
- Only contain /declarations/, also known as prototypes, not definitions
 - Function name
 - Arguments
 - Return type
 - No functionality
 - Example: =int add(int a, int b);=
- This enables a lot of different files to "know" about a function but only have one definition for it

* Note about header files
- C++ has a lot of flexibility; this is a blessing and a curse
- Your code will have little structure unless you organize it well
- Break up your code logically and purposefully
 - Readability above all

* Includes
#+BEGIN_NOTES
After introducing the concept, demo some basic examples of including a file within another file.
Draw a picture on the board of a.h included in b.h and then b.h and a.h included in a file
#+END_NOTES
- Allows you to use code from other files
- Will literally insert anything in name.h into the file
#+BEGIN_SRC C++
#include <name.h>
#+END_SRC

* Header guards C style
- will work in all cases
- uses macros
#+BEGIN_SRC C++ -n
    #ifndef FILENAME_H
    #define FILENAME_H
        ...
    #endif  // FILENAME_H
#+END_SRC

* #pragma once
- most compilers support this
#+BEGIN_SRC C++ -n
    #pragma once
#+END_SRC

* Working with strings
#+BEGIN_NOTES
Write and walk through some example code.
#+END_NOTES
- A C-style string is stored as an array of characters ending with a NULL (0x0)
- The C++ standard library contains a string class with several useful functions, in =<string>=
 - (We'll get to classes later)
 - Use this instead of C-style strings unless you have a specific reason not to
- Use the addition oprator (+) to concatenate strings
- Use =to_string= to convert other types to strings
- Use =sto_= functions to parse strings to other types
  - Ex). =stoi= to convert string to integer
  - Ex). =stod= to convert string to double

* String methods
| Name | Description |
|-------+------|
| =length= | Returns the length of a string |
| =substr= | Returns a portion (substring) of the string |
| =find= | Returns the position of a substring, if present |
| =empty= | Returns true if length is zero, otherwise false |

* How to find and read documentation
#+BEGIN_NOTES
Show how to get to the string documentation
#+END_NOTES
- Most of the last slide was sourced from [[http://en.cppreference.com/w/][cppreference.com]]
- Documents standard library functionality
- Great reference for all things C++

* Example Code
#+BEGIN_NOTES
draw the tree structure of the example code files. week2.cpp includes week2.h which includes operator.h. operator.cpp includes operator.cpp.
#+END_NOTES

* Git
#+BEGIN_NOTES
Time to switch to the Git/GitHub presentation.
#+END_NOTES
- [[file:git.org][Click here for this week's Git presentation]]
