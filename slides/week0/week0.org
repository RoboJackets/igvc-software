#+TITLE: Intro to Programming
#+AUTHOR: Jason Gibson
#+EMAIL: jgibson37@gateche.edu

* What are we doing today?
- Instructor introductions
- What is programming?
- Hello World!
- Variables
- Control flow
- Conditionals

* Meet Jason
#+ATTR_HTML: :width 15%
[[file:https://i.imgur.com/izC5WWA.jpg]]
- Jason Gibson
  - Junior, Computer Science (Threads: Devices, Intelligence)
  - Inside RoboJackets: Training Chair, IGVC Software Lead
  - Outside RoboJackets: Avid lover of dad jokes
  - Master of cringe-worthy pictures
- How to contact me
  - Slack: [[https://robojackets.slack.com/messages/@jasongibson/][@jasongibson]]
  - Email: [[mailto:jgibson37@gatech.edu][jgibson37@gatech.edu]]

* What is programming?
#+BEGIN_NOTES
Talk for a minute or two about everything programming can do -
Fully understanding a problem, analyzing that problem, determining recurrent actions,
and then optimizing those actions through logical constructs.
#+END_NOTES

* What programming is not
#+BEGIN_NOTES
This is meant to emphasize that they will not become a God programmer overnight
and to dispell the misconception that they are going to be coding amazing things
immediately.
#+END_NOTES
- Impossible
- Easy

* Programming failures
#+BEGIN_NOTES
1. Talk for a minute or two about everything programming can do. 2. Orbiter was pounds instead of newtons
3. Ariane software testing did not acccount for increased speed and tried too large a number.
#+END_NOTES
- Mars Climate Orbiter (1998)
    - The code returned the wrong units causing a 655 million dollar explosion on Mars
- Ariane 5 flight 501
    - Faster speed resulted in a 64 bit number being stored as 16 bits, ~500 million dollar failure

* CodePad
- Today we will be using CodePad to write and compile code
  - This is a remote interview tool
- Go to [[https://codepad.remoteinterview.io]]

* Change to C++ - the superior language
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/S1PecNy.png]]

* Hello World!
- Add *World!* to your code
#+BEGIN_SRC C++ -n :exports both :includes <iostream> :defines cout std::cout
  #include <iostream>
  using namespace std;

  int main() {
    cout << "Hello World!";
    return 0;
  }
#+END_SRC

* Click Run
#+ATTR_HTML: :width 50%
[[file:https://i.imgur.com/caYg2AY.png]]

* {}
- Curly braces define scope of a function in the code
- Right now, that means that your code goes in the main function
- All compound or control flow statements have curly braces
    - inside the *{}* defines the main method
#+BEGIN_SRC C++ -n
  int main() {
    // <==== HERE =====
  }
#+END_SRC

* ;
#+BEGIN_NOTES
Make sure to note that they will see this error a lot and that it will go away with time.
#+END_NOTES
- A semicolon defines the end of a statement of code
- Think of it like a period in a sentence
- All expression statements end in a semicolon
    - Declarations, assignments, function calls, etc
    - A missing semicolon results in an error message that can point to the wrong line
#+BEGIN_SRC C++ -n
    #include <iostream>
    using namespace std;
    int main() {
      cout << "Hello" // <=====
      cout << "World!";
      return 0;
    }
#+END_SRC
#+BEGIN_EXAMPLE
/temp/file.cpp: In function ‘int main()’:
/temp/file.cpp:5:5: error: expected ‘;’ before ‘cout’
     cout << "World!";
     ^

Compilation Failed
#+END_EXAMPLE

* Looking back at Hello World!
- Our code is in ={}=
- =cout= tells the computer to write the letters to the screen
- =<<= tells the computer what to write out
- Line 1: includes a header file (covered later)
- Line 4: defines the main function
- Line 6: tells the computer that the program ran successfully
#+BEGIN_SRC C++ -n :exports both :includes <iostream> :defines cout std::cout
  #include <iostream>
  using namespace std;

  int main() {
    cout << "Hello World!";
    return 0;
  }
#+END_SRC

* Most useful program ever
#+BEGIN_NOTES
This should naturally lead into why variables are useful. Without them
all programs would be deterministic.
#+END_NOTES
#+BEGIN_SRC C++ -n :exports both :includes <iostream> :defines cout std::cout
  int main() {
    cout << 2 + 2;
    return 0;
  }
#+END_SRC

* Variables
- Alias for a value
- The value can be changed without changing the alias

* Primitive Variable Types
| Name | Description |
|-------+------|
| =bool= | Can be either *true* or *false*|
| =char= | a character like 'c' or '+'|
| =int= | A whole number *bounded|
| =double= | a decimal number *bounded|

* What makes a variable primitive?

* Primitive variables?
[[file:https://i.imgur.com/Wo0ovX5.jpg]]
- But actually...it means that it cannot be divided into smaller parts
- A number is just a number

* Important symbols
#+BEGIN_NOTES
No lengthy explanation of << and stdout
#+END_NOTES
| Symbol | Meaning |
|-------+------|
| =//= | Signifies a comment - the computer will not try to compile that line |
| === | Assignment operator - value of right is assigned to variable on left |
| =<<= | Sends something to the OS which displays it in the terminal |

* Math operators
#+BEGIN_NOTES
explain that the table is in the order of operations
#+END_NOTES
| Symbol | Meaning |
|-------+------|
| =()= | Groups a statement |
| =*= | Multiplies two numbers |
| =/= | Divides a number by another |
| =+= | Adds two numbers together |
| =-= | Subtracts two numbers |

* Variable syntax
#+BEGIN_SRC C++ -n
  bool var = true;
  char character = 'c';
  int intVar = 2;
  double double_var = 2.2647;
#+END_SRC

* Variables
- =my_var= now represents the value 2
#+BEGIN_SRC C++ -n :exports both :includes <iostream> :defines cout std::cout
  int main() {
    int my_var = 2;
    cout << my_var + my_var;
    return 0;
  }
#+END_SRC

* Declaration vs Definition
#+BEGIN_SRC C++ -n
  // creates the variable num of type int and assigns it the value 1
  int num = 1;

  // the type is already known from above so this line just assigns it the value 4
  num = 4;
#+END_SRC

* Variables
- Variables can have their assigned value changed on the fly
#+BEGIN_SRC C++ -n :exports both :includes <iostream> :defines cout std::cout
  int main() {
    int my_var = 2;
    cout << my_var + my_var;
    my_var = 4;
    cout << my_var + my_var;
    return 0;
  }
#+END_SRC

* Questions?
#+BEGIN_NOTES
Write a couple examples of setting up a primitive already described and then
changing it using only the operators above. like printing numbers 1 - 10 using a var.
DO NOT use strings, ++, --, or anything else not covered already
#+END_NOTES
- Still more to come...
- Let's write some code

* If statements
- What *IF* I only want to execute code sometimes?

* If statement syntax
#+BEGIN_SRC C++ -n
  int main() {
    if (true) {
        // <==== This executes =====
    }
    if (false) {
        // <==== This does *NOT* execute =====
    }
  }
#+END_SRC

* Equivalence operators
| Symbol | Condition | True Example | False Example
|-------+------|------+------|
| =!= | opposite of current value| =!false= | =!true=
| ==== | "equal"| ~2 == 2~ | ~4 == 2~
| =!== | *NOT* "equal"| ~2 != 4~ | ~2 != 2~
| =>= | the number of the left is larger and not equal to the right | =4 > 2= | =2 > 4=
| =<= | the number of the left is smaller and not equal to the right | =2 < 4= | =4 < 2=

* If else syntax
#+BEGIN_SRC C++ -n
  int main() {
    if (true) {
        // <==== This executes =====
    } else {
        // <==== This does *NOT* execute =====
    }
    if (false) {
        // <==== This does *NOT* execute =====
    } else {
        // <==== This executes =====
    }
  }
#+END_SRC

* Conditional practice 1 question
#+BEGIN_NOTES
1
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 == 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Conditional practice 2 question
#+BEGIN_NOTES
2
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 != 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Conditional practice 3 question
#+BEGIN_NOTES
2
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 < 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Chaining conditionals
#+BEGIN_NOTES
Talk about how this is difficult to write at deeper levels, Think 5-6 Conditionals
#+END_NOTES
#+BEGIN_SRC C++ -n
  int main() {
    if (true) {
        // <==== This executes =====
        if (true) {
            // <==== This executes =====
        }
        // <==== This executes =====
    }
    // <==== This executes =====
  }
#+END_SRC

* Logical operators - AND
| a | b | a && b|
|-------+------|------+------|
| True | True | True |
| True | False | False |
| False | True | False |
| False | False | False |

* Logical operators - OR
| a | b | a \vert\vert b|
|-------+------|------+------|
| True | True | True |
| True | False | True |
| False | True | True |
| False | False | False |

* Logical operators order
- Statements will be evaluated from left to right
- No limit to the number you can have
- Statements can be grouped using =()=
    - Just like with math, operators =()= are executed first
    - =1 && (2 || 3)=
        - =2 || 3= is done first and the result is ANDed with 1

* Conditional practice 4 question
#+BEGIN_NOTES
2
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 < 2 && 2 == 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Conditional practice 4 question
#+BEGIN_NOTES
1
#+END_NOTES
- 1 or 2?
#+BEGIN_SRC C++ -n
if (2 != 2 || 2 == 2) {
    // 1
} else {
    // 2
}
#+END_SRC

* Loops!
- What if I want to do something multiple times?

* While loops syntax
#+BEGIN_SRC C++ -n
while (condition == true) {
    // do something
}
#+END_SRC

* For loop syntax
#+BEGIN_SRC C++ -n
for (initializer; condition; change condition) {
    // do something
}
#+END_SRC

* Math operators continued
#+BEGIN_SRC C++ -n
var = var + 1;
// equivalent to
var++;

var = var - 1;
// equivalent to
var--;
#+END_SRC

* Equivalent while and for loop
#+BEGIN_SRC C++ -n
int while_counter = 10;
while (while_counter > 0) {
    // do something
    while_counter = while_counter - 1;
}
for (int for_counter = 10; for_counter > 0; for_counter++) {
    // do something
}
#+END_SRC

* Let's write some code!
#+BEGIN_NOTES
Write a couple examples of code using what has already been covered.
Multiplication Table
Converting Time
s->m->h etc
Find length of a number
99 bottles
#+END_NOTES

* Questions?
- A go-to place to ask questions ([[https://piazza.com/gatech/fall2017/rjsw/home][Piazza!]])
- Monitored by highly experienced RoboJackets software members
