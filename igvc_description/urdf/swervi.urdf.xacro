<?xml version="1.0"?>

<robot name="Swervi" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:include filename="swervi_prop.urdf.xacro"/>
    <xacro:include filename="swerve_module.urdf.xacro"/>
    <xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro"/>

    <!-- base of the robot, should be ground level, centered on the robot -->
    <link name="base_link">
        <xacro:null_link/>
    </link>

    <gazebo reference="base_link">
        <material>Gazebo/Grey</material>
    </gazebo>

    <link name="base_footprint">
        <xacro:null_link/>
    </link>

    <gazebo reference="base_footprint">
        <material>Gazebo/Grey</material>
    </gazebo>

    <joint name="base_footprint_to_base_link" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
    </joint>

    <link name="chassis">
        <inertial>
            <mass value="${chassis_mass}" />
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <!-- approximate the intertial matrix as a sphere -->
            <inertia  ixx="${chassis_Ixx}" ixy="0.0" ixz="0.0"
                        iyy="${chassis_Iyy}" iyz="0.0"
                        izz="${chassis_Izz}" />
        </inertial>
        <visual>
            <geometry>
                <mesh filename="package://igvc_description/urdf/meshes/swervi_chassis.dae"/>
            </geometry>
        </visual>
        <collision>
            <geometry>
                <mesh filename="package://igvc_description/urdf/meshes/swervi_chassis.dae"/>
            </geometry>
        </collision>
    </link>

    <joint name="base_link_to_chassis" type="fixed">
        <parent link="base_link"/>
        <child link="chassis"/>
        <origin xyz="0.0 0.0 ${chassis_offset_z}" rpy="${M_PI / 2} 0 ${M_PI / 2}"/>
    </joint>

    <gazebo reference="chassis">
        <material>Gazebo/Grey</material>
        <mu1>0.2</mu1>
        <mu2>0.2</mu2>
    </gazebo>

    <xacro:swerve_module prefix="fl" x_pos="${wheel_offset_x}" y_pos="${wheel_offset_y}"/> 
    <xacro:swerve_module prefix="bl" x_pos="${-wheel_offset_x}" y_pos="${wheel_offset_y}"/> 
    <xacro:swerve_module prefix="br" x_pos="${-wheel_offset_x}" y_pos="${-wheel_offset_y}"/> 
    <xacro:swerve_module prefix="fr" x_pos="${wheel_offset_x}" y_pos="${-wheel_offset_y}"/> 

    
    <link name="lidar_support">
        <visual>
            <geometry>
                <box size="${lidar_support_x_dim} ${lidar_support_y_dim} ${lidar_support_z_dim}"/>
            </geometry>
        </visual>
    </link>

    <joint name="base_link_to_lidar_support" type="fixed">
        <parent link="base_link"/>
        <child link="lidar_support"/>
        <origin xyz="${lidar_x/2} 0.0 ${lidar_z-lidar_support_z_dim/2}" rpy="0.0 0.0 0.0"/>
    </joint>

    <!-- collision range = min sensing distance -->
    <!-- gpu does gpu acceleration -->
    <xacro:VLP-16 parent="base_link" name="lidar" topic="/velodyne_points" hz="${lidar_hz}" samples="${lidar_samples}" gpu="$(arg gpu)">
        <origin xyz="${lidar_x} 0.0 ${lidar_z}" rpy="0 ${lidar_pitch} 0" />
    </xacro:VLP-16>

    <!-- Just Used for testing 
    <link name="world"/>
    <joint name="world_to_base_footprint" type="fixed">
        <parent link="world"/>
        <child link="base_footprint"/>
    </joint> -->

    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
        </plugin>

        <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
            <alwaysOn>true</alwaysOn>
            <updateRate>200.0</updateRate>
            <bodyName>base_footprint</bodyName>
            <topicName>ground_truth/state_raw</topicName>
            <gaussianNoise>0.00</gaussianNoise>
            <frameName>world</frameName>
            <!-- origin is at spawn location -->
            <xyzOffset>0 0 0</xyzOffset>
            <rpyOffset>0 0 0</rpyOffset>
        </plugin>

    </gazebo>

</robot>